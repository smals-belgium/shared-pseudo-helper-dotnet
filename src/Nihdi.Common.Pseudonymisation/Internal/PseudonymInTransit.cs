// <copyright file="PseudonymInTransit.cs" company="Riziv-Inami">
// Copyright (c) Riziv-Inami. All rights reserved.
// </copyright>

namespace Nihdi.Common.Pseudonymisation.Internal;

using Microsoft.IdentityModel.Tokens;
using Nihdi.Common.Pseudonymisation;
using Nihdi.Common.Pseudonymisation.Utils;
using Org.BouncyCastle.Math;

/// <inheritdoc/>
public class PseudonymInTransit : IPseudonymInTransit
{
    private readonly Pseudonym _pseudonym;
    private readonly TransitInfo _transitInfo;
    private IPseudonym? _decryptedPseudonym;

    /// <summary>
    /// Initializes a new instance of the <see cref="PseudonymInTransit"/> class.
    /// </summary>
    /// <param name="pseudonym">The pseudonym to be used.</param>
    /// <param name="transitInfo">The transit information associated with the pseudonym.</param>
    /// <param name="decryptedPseudonym">The decrypted pseudonym, if available.</param>
    public PseudonymInTransit(
        IPseudonym pseudonym,
        ITransitInfo transitInfo,
        IPseudonym? decryptedPseudonym = null)
    {
        this._pseudonym = (Pseudonym)pseudonym;
        this._transitInfo = (TransitInfo)transitInfo;
        this._decryptedPseudonym = decryptedPseudonym;
    }

    /// <inheritdoc/>
    public Domain Domain => _pseudonym.Domain;

    /// <inheritdoc/>
    public string X()
    {
        return _pseudonym.X();
    }

    /// <inheritdoc/>
    public string Y()
    {
        return _pseudonym.Y();
    }

    /// <inheritdoc/>
    public IPseudonym Pseudonym()
    {
        return _pseudonym;
    }

    /// <inheritdoc/>
    public ITransitInfo GetTransitInfo() => _transitInfo;

    /// <inheritdoc/>
    public string AsString()
    {
        return _pseudonym.AsString() + ":" + _transitInfo.AsString();
    }

    /// <inheritdoc/>
    public string AsShortString()
    {
        return _pseudonym.AsShortString() + ":" + _transitInfo.AsString();
    }

    /// <inheritdoc/>
    public Task<IValue> Identify()
    {
        var random = Domain.CreateRandom();

        if (random == null)
        {
            throw new InvalidOperationException("The random number generated by the domain cannot be null.");
        }

        var blindedPseudonym = _pseudonym.Multiply(random);
        var payload = Domain.CreatePayloadString(blindedPseudonym, _transitInfo.AsString());

        if (Domain.PseudonymisationClient == null)
        {
            throw new InvalidOperationException("The pseudonymisation client provided by the domain cannot be null.");
        }

        if (Domain.Key == null)
        {
            throw new InvalidOperationException("The domains's key property cannot be null.");
        }

        return Domain.PseudonymisationClient
            .Identify(Domain.Key, payload)
            .ContinueWith(rawResponse =>
            {
                var valueAsPseudonym = Domain.PseudonymFactory.FromRawResponse(rawResponse.Result, random);
                return new Value(valueAsPseudonym.EcPoint, Domain) as IValue;
            });
    }

    /// <inheritdoc/>
    public IPseudonym? AtRest()
    {
        if (_decryptedPseudonym != null)
        {
            return _decryptedPseudonym;
        }

        _decryptedPseudonym = AtRest(true);
        return _decryptedPseudonym;
    }

    /// <inheritdoc/>
    public IPseudonym? AtRest(bool validateIatAndExp)
    {
        var payload = _transitInfo.Payload();
        if (validateIatAndExp)
        {
            _transitInfo.ValidatePayload();
        }

        var scalar = new BigInteger(Base64UrlEncoder.DecodeBytes(payload?["scalar"]?.ToString()!));
        return _pseudonym.Multiply(scalar);
    }

    /// <inheritdoc/>
    public Task<IPseudonymInTransit> ConvertTo(IDomain toDomain)
    {
        if (toDomain == null || toDomain.Key == null)
        {
            throw new InvalidOperationException($"In a Convert operation, {nameof(toDomain)} must exist and have a non null Key property.");
        }

        var domain = _pseudonym.Domain;
        if (domain == null || domain.Key == null)
        {
            throw new InvalidOperationException($"In a Convert operation, {nameof(domain)} must exist and have a non null Key property.");
        }

        if (domain.PseudonymisationClient == null)
        {
            throw new InvalidOperationException("PseudonymisationClient cannot be null when converting to another domain.");
        }

        var random = domain.CreateRandom();
        var blindedPseudonym = _pseudonym.Multiply(random);
        var payload = domain.CreatePayloadString(blindedPseudonym, _transitInfo.AsString());
        return domain.PseudonymisationClient.ConvertTo(domain.Key, toDomain.Key, payload)
            .ContinueWith(s => ((PseudonymInTransitFactory)toDomain.PseudonymInTransitFactory)
                .FromRawResponse(s.Result, random));
    }

    /// <inheritdoc/>
    public override bool Equals(object? obj)
    {
        if (ReferenceEquals(this, obj))
        {
            return true;
        }

        if (obj is not PseudonymInTransit that)
        {
            return false;
        }

        return _pseudonym.Equals(that._pseudonym)
            && _transitInfo.Equals(that._transitInfo);
    }

    /// <inheritdoc/>
    public override int GetHashCode()
    {
        return HashCode.Combine(_pseudonym.EcPoint.XCoord, _pseudonym.Domain.Key, _transitInfo);
    }

    /// <inheritdoc/>
    public override string ToString()
    {
        return "{" +
               "\"x\": \"" + _pseudonym.X() + "\", " +
               "\"y\": \"" + _pseudonym.Y() + "\"," +
               "\"domain\": \"" + _pseudonym.Domain.Key + "\"," +
               "\"transitInfo\": " + _transitInfo +
               '}';
    }
}
